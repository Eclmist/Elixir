#
#    This file is part of Elixir, an open-source cross platform physically
#    based renderer.
#   
#    Copyright (c) 2019-2020 Samuel Van Allen - All rights reserved.
#   
#    Elixir is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#   
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#   
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   

# Sets the minimum required CMake version. We need 3.6 for VS_STARTUP_PROJECT support
cmake_minimum_required (VERSION 3.6)

# Sets the C++ versions
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Setup the name of the solution. This will change some of the directories naming convention
# generated by CMake. Ignore CXX in the second param since CMake supports C++ by default
project ( Elixir )

# Group cmake defined targets into CMakePredefinedTargets
set(CMAKE_SUPPRESS_REGENERATION true)

# Set the project source directories. This is set when running the CMake GUI
set ( EXR_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )
set ( EXR_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} )

# Setting on project generation
SET ( EXR_USE_NAMESPACE "YES" CACHE BOOL "Enable generating Elixir namespace. This is enabled by default." )
SET ( EXR_USE_FASTMATH "NO" CACHE BOOL "Enable fast math. May introduce arithmetic error. This is disabled by default" )
SET ( EXR_USE_WHOLE_PROGRAMME_OPTIMIZATION "YES" CACHE BOOL "Enable whole programme optimizations. This is enabled by default." )

# Define platform
if ( WIN32 )
    set ( EXR_PLATFORM_WIN true ) 
    set ( EXR_PLATFORM_MAC false ) 
    set ( EXR_PLATFORM_LINUX false ) 
    set ( EXR_PLATFORM_NAME "\"Windows\"" ) 
elseif ( APPLE )
    set ( EXR_PLATFORM_WIN false ) 
    set ( EXR_PLATFORM_MAC true ) 
    set ( EXR_PLATFORM_LINUX false ) 
    set ( EXR_PLATFORM_NAME "\"Mac OS\"" ) 
elseif ( UNIX )
    set ( EXR_PLATFORM_WIN false ) 
    set ( EXR_PLATFORM_MAC false ) 
    set ( EXR_PLATFORM_LINUX true ) 
    set ( EXR_PLATFORM_NAME "\"Linux\"" ) 
endif ()

# Check if aligned memory allocators available
INCLUDE (CheckCXXSourceCompiles)

CHECK_CXX_SOURCE_COMPILES ( "
#include <malloc.h>
int main() { void * ptr = _aligned_malloc(1024, 32); }
" HAVE_ALIGNED_MALLOC )

CHECK_CXX_SOURCE_COMPILES ( "
#include <stdlib.h>
int main() {
  void *ptr;
  posix_memalign(&ptr, 32, 1024);
} " HAVE_POSIX_MEMALIGN )

CHECK_CXX_SOURCE_COMPILES ( "
#include <malloc.h>
int main() {
    void *ptr = memalign(32, 1024);
} " HAVE_MEMALIGN )

if ( HAVE_ALIGNED_MALLOC )
  set ( EXR_HAVE_ALIGNED_MALLOC true )
elseif ( HAVE_POSIX_MEMALIGN )
  set ( EXR_HAVE_POSIX_MEMALIGN true )
elseif ( HAVE_MEMALIGN )
  set ( EXR_HAVE_MEMALIGN true )
else ()
  message ( SEND_ERROR "Unable to find a way to allocate aligned memory" )
endif ()

# Send the variables to the source code header
configure_file (
    "${PROJECT_SOURCE_DIR}/src/system/config.h.in"
    "${PROJECT_SOURCE_DIR}/src/system/config.h"
)

# Enable multi-thread compiling on Windows.
if ( EXR_PLATFORM_WIN )
    include( ProcessorCount )
    ProcessorCount( N )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${N}" )
endif ( EXR_PLATFORM_WIN )

# Include directories
# In GCC, this will invoke the "-I" command
include_directories ( include )

# Where are the additional libraries installed? Note: provide includes path here
# subsequent checks will resolve everything else
set ( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/" )

# Options to choose configuration type
if ( NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES )
    message ( STATUS "Setting build type to '{DEFAULT_BUILD_TYPE}' as none was specified." )
    set ( CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE )
    # Set the possible values of build type for CMake GUI
    set_property ( CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" )
endif ()

include_directories ( "${EXR_SOURCE_DIR}/src" )

# Find all source files and group them by directory
macro ( source_group_by_dir source_files )
    set ( sgbd_cur_dir ${EXR_SOURCE_DIR}/src )
    foreach ( sgbd_file ${${source_files}} )
	string ( REGEX REPLACE ${sgbd_cur_dir}/\(.*\) \\1 sgbd_fpath ${sgbd_file} )
	string ( REGEX REPLACE "\(.*\)/.*" \\1 sgbd_group_name ${sgbd_fpath} )
	string ( COMPARE EQUAL ${sgbd_fpath} ${sgbd_group_name} sgbd_nogroup )
	string ( REPLACE "/" "\\" sgbd_group_name ${sgbd_group_name} )
	if ( sgbd_nogroup )
	    set ( sgbd_group_name "\\" )
	endif ( sgbd_nogroup )
	source_group ( ${sgbd_group_name} FILES ${sgbd_file} )
    endforeach( sgbd_file )
endmacro ( source_group_by_dir )

file ( GLOB_RECURSE project_headers src/*.h )
file ( GLOB_RECURSE project_cpps src/*.cpp )
file ( GLOB_RECURSE project_cs src/*.c )
file ( GLOB_RECURSE project_ccs src/*.cc )

set ( all_files ${project_headers} ${project_cpps} ${project_cs} ${project_ccs} )
source_group_by_dir( all_files )

file ( GLOB_RECURSE extern_headers include/*.h )
file ( GLOB_RECURSE extern_cpps include/*.cpp )
file ( GLOB_RECURSE extern_cs include/*.c )
file ( GLOB_RECURSE extern_ccs include/*.cc )

set ( extern_files ${extern_headers} ${extern_cpps} ${extern_cs} ${extern_ccs} )

set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${EXR_SOURCE_DIR}/bin" )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${EXR_SOURCE_DIR}/bin/release" )
set ( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${EXR_SOURCE_DIR}/bin/debug" )

add_executable ( Elixir ${all_files} )
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT "Elixir")

if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # Enable Whole Programme Optimization & Link Time Optimizations (/GL, /LTCG)
    if ( EXR_USE_WHOLE_PROGRAMME_OPTIMIZATION )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GL" )
        set_target_properties( Elixir PROPERTIES LINK_FLAGS_RELEASE "/LTCG")
    endif ( EXR_USE_WHOLE_PROGRAMME_OPTIMIZATION )

    # Enables low precision fast math
    if ( EXR_USE_FASTMATH )
        set_target_properties( Elixir PROPERTIES COMPILE_FLAGS "/fp:fast" )
    endif ( EXR_USE_FASTMATH )
else ()
	set_source_files_properties(${all_files} PROPERTIES COMPILE_FLAGS -w)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

    if( EXR_ENABLE_WHOLE_PROGRAMME_OPTIMIZATION )
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto")
    endif()

    if( EXR_USE_FASTMATH )
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math")
    endif()
endif()

# Set output name for different configs
set_target_properties ( Elixir PROPERTIES RELEASE_OUTPUT_NAME "elixir_r" )
set_target_properties ( Elixir PROPERTIES DEBUG_OUTPUT_NAME "elixir_d" )

# Output include directories
if ( DEBUG_CMAKE )
    get_property ( dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES )
    message ( STATUS "Including directories: " )
    foreach ( dir ${dir} )
	message ( STATUS "\t'${dir}'" )
    endforeach ()
endif ()

MARK_AS_ADVANCED(CMAKE_INSTALL_PREFIX)
